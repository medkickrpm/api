basePath: /v1
definitions:
  careplan.CreateRequest:
    properties:
      doctor_id:
        type: integer
      user_id:
        type: integer
    required:
    - user_id
    type: object
  cron.Request:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  device.DeviceAssignRequest:
    properties:
      device_id:
        type: integer
      user_id:
        type: integer
    required:
    - device_id
    - user_id
    type: object
  device.MioData:
    properties:
      bat:
        type: integer
      data:
        type: integer
      data_type:
        type: string
      dia:
        type: integer
      hand:
        type: boolean
      iccid:
        type: string
      ihb:
        type: boolean
      imei:
        type: string
      lts:
        type: integer
      meal:
        type: integer
      pul:
        type: integer
      sample:
        type: integer
      sample_type:
        type: integer
      sig:
        type: integer
      sig_lvl:
        type: integer
      sn:
        type: string
      sys:
        type: integer
      tri:
        type: boolean
      ts:
        type: integer
      tz:
        type: string
      uid:
        type: string
      unit:
        type: integer
      upload_time:
        type: integer
      uptime:
        type: integer
      user:
        type: integer
      wet:
        type: integer
      wt:
        type: integer
    required:
    - bat
    - data_type
    - imei
    type: object
  device.MioStatus:
    properties:
      at_t:
        type: integer
      bat:
        type: integer
      data_type:
        type: string
      imei:
        type: string
      me_num:
        type: integer
      net:
        type: string
      ops:
        type: string
      sig:
        type: integer
      tp:
        type: integer
      tz:
        type: string
    required:
    - data_type
    - imei
    type: object
  device.RequestStatus:
    properties:
      createdAt:
        type: integer
      deviceId:
        type: string
      isTest:
        type: boolean
      modelNumber:
        type: string
      status:
        $ref: '#/definitions/device.MioStatus'
    required:
    - createdAt
    - deviceId
    - modelNumber
    type: object
  device.RequestTelemetry:
    properties:
      createdAt:
        type: integer
      data:
        $ref: '#/definitions/device.MioData'
      deviceId:
        type: string
      isTest:
        type: boolean
      modelNumber:
        type: string
    required:
    - createdAt
    - deviceId
    - modelNumber
    type: object
  device.UpdateRequest:
    properties:
      battery_level:
        type: integer
      firmware_version:
        type: string
      imei:
        type: string
      model_number:
        type: string
      name:
        type: string
      serial_number:
        type: string
      signal_strength:
        type: string
      user_id:
        type: integer
    type: object
  dto.CareplanSheetResponse:
    properties:
      a-fib_goals:
        type: string
      a-fib_improvement_plan:
        type: string
      activities_of_daily_living_improvement_goals:
        type: string
      adl_nutrition_plan:
        type: string
      ambulation_walking_and_using_stairs:
        type: string
      anemia_goals:
        type: string
      anemia_improvement_plan:
        type: string
      bathing_showering:
        type: string
      bone_health_goals:
        type: string
      bone_health_plan:
        type: string
      bowel_regularity_plan:
        type: string
      care_coordinator:
        type: string
      chf_goals:
        type: string
      chf_improvement_plan:
        type: string
      cholesterol_goals:
        type: string
      cholesterol_improvement_plan:
        type: string
      chronic_conditions:
        type: string
      chronic_headache_migraine_goals:
        type: string
      chronic_headache_migraine_improvement_plan:
        type: string
      cleaning:
        type: string
      coronary_artery_disease_goals:
        type: string
      coronary_artery_disease_plan:
        type: string
      date:
        type: string
      diabetes_goals:
        type: string
      diabetes_improvement_plan:
        type: string
      diet_goals:
        type: string
      diet_improvement_plan:
        type: string
      dob:
        type: string
      dressing:
        type: string
      energy_improvement_plan:
        type: string
      exercise:
        type: string
      exercise_activity_plan:
        type: string
      exercise_goals:
        type: string
      eye_health_goals:
        type: string
      eye_health_improvement_plan:
        type: string
      fall_prevention_goals:
        type: string
      fall_prevention_plan:
        type: string
      first_name:
        type: string
      food_preparation_ideas:
        type: string
      gerd_goals:
        type: string
      gerd_plan:
        type: string
      goals_areas:
        type: string
      hobbies:
        type: string
      hydration_goals:
        type: string
      hydration_improvement_plan:
        type: string
      hypertension_goals:
        type: string
      hypertension_plan:
        type: string
      improving_hair_and_skin_plan:
        type: string
      input153_goals:
        type: string
      input153_plan:
        type: string
      kidney_health_goals:
        type: string
      kidney_health_plan:
        type: string
      last_name:
        type: string
      low_blood_pressure_avoidance_plan:
        type: string
      low_blood_pressure_improvement_goals:
        type: string
      managing_finances:
        type: string
      medication_management:
        type: string
      medication_reconciliation:
        type: string
      memory_care_goals:
        type: string
      memory_care_plan:
        type: string
      mental_health_goals:
        type: string
      mental_health_improvement_plan:
        type: string
      no_label:
        type: string
      no_label_2:
        type: string
      obstacles:
        type: string
      office_email:
        type: string
      other_diagnosis_not_listed:
        type: string
      oxygen_safety_goals:
        type: string
      oxygen_safety_plan:
        type: string
      pain_goals:
        type: string
      pain_reduction_plan:
        type: string
      pet_care:
        type: string
      post_heart_attack_goals:
        type: string
      post_heart_attack_plan:
        type: string
      post_stroke_tia_goals:
        type: string
      post_stroke_tia_plan:
        type: string
      preventatives_due:
        type: string
      respiratory_challenges_and_breathing_improvement_plan:
        type: string
      respiratory_goals:
        type: string
      running_errands_transportation:
        type: string
      self_care_goals:
        type: string
      self_care_plan:
        type: string
      sleep_goals:
        type: string
      sleep_improvement_plan:
        type: string
      social_activities:
        type: string
      sodium_reduction_plan:
        type: string
      standing_getting_out_of_chair_balance:
        type: string
      stress_goals:
        type: string
      stress_reduction_plan:
        type: string
      submission_date:
        type: string
      submission_id:
        type: string
      thyroid_health_goals:
        type: string
      thyroid_health_improvement_plan:
        type: string
      tobacco_use_goals:
        type: string
      tobacco_use_plan:
        type: string
      toileting:
        type: string
      using_phone_technology:
        type: string
      weight_loss_goals:
        type: string
      weight_loss_plan:
        type: string
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  interaction.CreateRequest:
    properties:
      cost_category:
        enum:
        - RPM
        - CCM
        - PCM
        - BHI
        - RTM
        type: string
      doctor_id:
        type: integer
      duration:
        type: integer
      notes:
        type: string
      session_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      user_id:
        type: integer
    required:
    - cost_category
    - duration
    - notes
    - session_date
    - user_id
    type: object
  interaction.UpdateRequest:
    properties:
      cost_category:
        type: string
      doctor_id:
        type: integer
      duration:
        type: integer
      notes:
        type: string
      session_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      user_id:
        type: integer
    type: object
  models.AlertType:
    enum:
    - Critical
    - Warning
    - Ok
    type: string
    x-enum-varnames:
    - AlertCritical
    - AlertWarning
    - AlertOk
  models.CarePlan:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      doctor:
        $ref: '#/definitions/models.User'
      doctor_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      url:
        example: https://cdn.med-kick.com/xxx.pdf
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.Device:
    properties:
      battery_level:
        example: 100
        type: integer
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      deviceTelemetryData:
        items:
          $ref: '#/definitions/models.DeviceTelemetryData'
        type: array
      firmware_version:
        example: 1.0.0
        type: string
      id:
        example: 1
        type: integer
      imei:
        example: "123456789"
        type: string
      model_number:
        example: "123456"
        type: string
      name:
        example: Sphygmomanometer/Weight Scale/Blood Glucose Meter
        type: string
      serial_number:
        example: "123456789"
        type: string
      signal_strength:
        example: "100"
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.DeviceDTO:
    properties:
      battery_level:
        example: 100
        type: integer
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      firmware_version:
        example: 1.0.0
        type: string
      id:
        example: 1
        type: integer
      imei:
        example: "123456789"
        type: string
      model_number:
        example: "123456"
        type: string
      name:
        example: Sphygmomanometer/Weight Scale/Blood Glucose Meter
        type: string
      serial_number:
        example: "123456789"
        type: string
      signal_strength:
        example: "100"
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  models.DeviceResponse:
    properties:
      battery_level:
        type: integer
      created_at:
        type: string
      deviceTelemetryData:
        $ref: '#/definitions/models.DeviceTelemetryDataResponse'
      firmware_version:
        type: string
      id:
        type: integer
      imei:
        type: string
      model_number:
        type: string
      name:
        type: string
      serial_number:
        type: string
      signal_strength:
        type: string
      updated_at:
        type: string
      user_id:
        type: integer
    type: object
  models.DeviceStatusData:
    properties:
      attach_time:
        example: "100"
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      device:
        $ref: '#/definitions/models.Device'
      device_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      measure_count:
        example: 100
        type: integer
      network_format:
        example: GSM;eMTC;NB-IoT
        type: string
      network_ops:
        example: T-Mobile;Verizon
        type: string
      signal:
        example: 100
        type: integer
      temperature:
        example: 100
        type: integer
      timezone:
        description: Device
        example: UTC+6
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  models.DeviceTelemetryData:
    properties:
      blood_glucose:
        description: Blood Glucose Meter
        example: 80
        type: integer
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      device:
        $ref: '#/definitions/models.Device'
      device_id:
        example: 1
        type: integer
      diastolic_bp:
        example: 80
        type: integer
      hand_shaking:
        example: false
        type: boolean
      id:
        example: 1
        type: integer
      irregular_heartbeat:
        example: false
        type: boolean
      meal:
        example: 1. Before Meal; 2. After Meal
        type: string
      measured_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      pulse:
        example: 80
        type: integer
      sample_type:
        example: 1. Blood or Resistance; 2. Quality Control Liquid; 3. Sample is invalid
        type: string
      systolic_bp:
        description: Sphygmomanometer
        example: 120
        type: integer
      test_paper:
        example: 1. GOD; 2. GDH
        type: string
      triple_measurement:
        example: false
        type: boolean
      unit:
        example: mg/dL
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
      weight:
        description: Weight Scale
        example: 80
        type: integer
      weight_lock_count:
        example: 3
        type: integer
      weight_stable_time:
        example: 5
        type: integer
    type: object
  models.DeviceTelemetryDataResponse:
    properties:
      blood_glucose:
        description: Blood Glucose Meter
        type: integer
      created_at:
        type: string
      device_id:
        type: integer
      diastolic_bp:
        type: integer
      hand_shaking:
        type: boolean
      id:
        type: integer
      irregular_heartbeat:
        type: boolean
      meal:
        type: string
      measured_at:
        type: string
      pulse:
        type: integer
      sample_type:
        type: string
      systolic_bp:
        description: Sphygmomanometer
        type: integer
      test_paper:
        type: string
      triple_measurement:
        type: boolean
      unit:
        type: string
      updated_at:
        type: string
      weight:
        description: Weight Scale
        type: integer
      weight_lock_count:
        type: integer
      weight_stable_time:
        type: integer
    type: object
  models.DeviceType:
    enum:
    - BloodPressure
    - BloodGlucose
    - WeightScale
    type: string
    x-enum-varnames:
    - BloodPressure
    - BloodGlucose
    - WeightScale
  models.Diagnosis:
    properties:
      code:
        example: I10
        type: string
      diagnosis_name:
        example: Essential (primary) hypertension
        type: string
      short_mnemonic:
        example: Essential (primary) hypertension
        type: string
    type: object
  models.DignosesResponse:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      diagnosis:
        $ref: '#/definitions/models.Diagnosis'
      diagnosis_id:
        type: integer
      user_id:
        type: integer
    type: object
  models.Interaction:
    properties:
      cost_category:
        example: ""
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      doctor:
        $ref: '#/definitions/models.User'
      doctor_id:
        example: 1
        type: integer
      duration:
        example: 30
        type: integer
      id:
        example: 1
        type: integer
      notes:
        example: Patient is doing well
        type: string
      session_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.InteractionSettingType:
    enum:
    - ColorThreshold
    type: string
    x-enum-varnames:
    - ColorThreshold
  models.MeasurementType:
    enum:
    - Systolic
    - Diastolic
    - Pulse
    - Weight
    type: string
    x-enum-varnames:
    - Systolic
    - Diastolic
    - Pulse
    - Weight
  models.Organization:
    properties:
      address:
        example: 123 Main St
        type: string
      address2:
        example: Apt 1
        type: string
      city:
        example: Baltimore
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Hopkins
        type: string
      phone:
        example: "08123456789"
        type: string
      state:
        example: MD
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      zip:
        example: "12345"
        type: string
    type: object
  models.PatientDiagnosis:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      diagnosis:
        $ref: '#/definitions/models.Diagnosis'
      diagnosis_id:
        type: integer
      patient:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  models.Service:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      description:
        example: Remote Patient Monitoring
        type: string
      id:
        example: 1
        type: integer
      is_enabled:
        example: true
        type: boolean
      service_code:
        example: RPM
        type: string
      service_name:
        example: Remote Patient Monitoring
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  models.User:
    properties:
      avatar_src:
        example: https://cdn.med-kick.com/xxx.jpg
        type: string
      city:
        example: Dallas
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      device:
        items:
          $ref: '#/definitions/models.Device'
        type: array
      dob:
        example: "2000-01-01"
        type: string
      email:
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      insurance_id:
        example: "123456789"
        type: string
      insurance_provider:
        example: Aetna
        type: string
      interaction:
        items:
          $ref: '#/definitions/models.Interaction'
        type: array
      last_name:
        example: Doe
        type: string
      location:
        example: Dallas, TX
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        example: 1
        type: integer
      password:
        example: "123456"
        type: string
      patientDiagnosis:
        items:
          $ref: '#/definitions/models.PatientDiagnosis'
        type: array
      phone:
        example: "08123456789"
        type: string
      provider:
        example: Test Provider
        type: string
      role:
        example: admin
        type: string
      state:
        example: TX
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      zipcode:
        example: "32343"
        type: string
    type: object
  models.UserResponse:
    properties:
      avatar_src:
        type: string
      city:
        type: string
      country:
        type: string
      created_at:
        type: string
      devices:
        items:
          $ref: '#/definitions/models.DeviceResponse'
        type: array
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      patient_diagnosis:
        items:
          $ref: '#/definitions/models.DignosesResponse'
        type: array
      reading_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      readings:
        example: 1
        type: integer
      role:
        type: string
      state:
        type: string
      total_duration:
        description: Interactions      MainInterActionsResponse `json:"interactions,omitempty"`
        example: 30
        type: integer
      updated_at:
        type: string
      zipcode:
        type: string
    type: object
  organization.BillingRecordBody:
    properties:
      cpt_codes:
        example: 1,2,3
        type: string
      dob:
        example: 01/01/2000
        type: string
      dos:
        example: 01/01/2021
        type: string
      first_name:
        example: John
        type: string
      icd10:
        example: A00.0
        type: string
      last_name:
        example: Doe
        type: string
      provider:
        example: Dr. John Doe
        type: string
    type: object
  organization.BillingReportResponse:
    properties:
      end_date:
        example: "2006-01-02"
        type: string
      records:
        items:
          $ref: '#/definitions/organization.BillingRecordBody'
        type: array
      service:
        example: RPM
        type: string
      start_date:
        example: "2006-01-02"
        type: string
    type: object
  organization.CreateRequest:
    properties:
      address:
        type: string
      address2:
        type: string
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phone:
        type: string
      state:
        type: string
      zip:
        type: string
    required:
    - address
    - city
    - country
    - name
    - phone
    - state
    - zip
    type: object
  organization.InteractionSettingData:
    properties:
      setting_type:
        allOf:
        - $ref: '#/definitions/models.InteractionSettingType'
        enum:
        - ColorThreshold
      value:
        type: integer
    required:
    - setting_type
    type: object
  organization.TelemetryAlertResponse:
    properties:
      alert_id:
        example: 1
        type: integer
      is_active:
        example: true
        type: boolean
      patient_id:
        example: 1
        type: integer
      patient_name:
        example: John Doe
        type: string
      phone_number:
        example: "08123456789"
        type: string
      resolved_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      resolved_by:
        example: John Doe
        type: string
      status:
        allOf:
        - $ref: '#/definitions/models.AlertType'
        example: Critical
      telemetry_id:
        example: 1
        type: integer
      time:
        example: "2021-01-01T00:00:00Z"
        type: string
      vitals:
        additionalProperties: true
        type: object
    type: object
  organization.UpdateRequest:
    properties:
      address:
        type: string
      address2:
        type: string
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phone:
        type: string
      state:
        type: string
      zip:
        type: string
    required:
    - address
    - city
    - country
    - name
    - phone
    - state
    - zip
    type: object
  user.AlertThresholdData:
    properties:
      device_type:
        allOf:
        - $ref: '#/definitions/models.DeviceType'
        enum:
        - BloodPressure
        - BloodGlucose
        - WeightScale
      measurements:
        items:
          $ref: '#/definitions/user.MeasurementData'
        minItems: 1
        type: array
      note:
        type: string
    required:
    - device_type
    - measurements
    type: object
  user.CreateRequest:
    properties:
      city:
        type: string
      country:
        type: string
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      phone:
        type: string
      provider:
        type: string
      role:
        description: 'Roles: admin, doctor, patient, doctornv, patientnv (nv = not
          verified email)'
        type: string
      state:
        type: string
      zipcode:
        type: string
    required:
    - dob
    - email
    - first_name
    - insurance_id
    - insurance_provider
    - last_name
    - location
    - organization_id
    - password
    - phone
    - role
    type: object
  user.DiagnosisData:
    properties:
      diagnoses:
        items:
          type: string
        type: array
    required:
    - diagnoses
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.MeasurementData:
    properties:
      critical_high:
        type: integer
      critical_low:
        type: integer
      measurement_type:
        allOf:
        - $ref: '#/definitions/models.MeasurementType'
        enum:
        - Systolic
        - Diastolic
        - Pulse
        - Weight
      warning_high:
        type: integer
      warning_low:
        type: integer
    required:
    - measurement_type
    type: object
  user.PatientServiceData:
    properties:
      services:
        items:
          type: string
        type: array
    required:
    - services
    type: object
  user.PatientServiceResponse:
    properties:
      ended_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      is_service_active:
        example: true
        type: boolean
      patient_id:
        example: 1
        type: integer
      service_code:
        example: RPM
        type: string
      service_name:
        example: Remote Patient Monitoring
        type: string
      started_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  user.RegisterRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      phone:
        type: string
    required:
    - dob
    - email
    - first_name
    - insurance_id
    - insurance_provider
    - last_name
    - location
    - organization_id
    - password
    - phone
    type: object
  user.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.UpdateRequest:
    properties:
      city:
        type: string
      country:
        type: string
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      phone:
        type: string
      provider:
        type: string
      role:
        type: string
      state:
        type: string
      zipcode:
        type: string
    type: object
  user.VerifyResetPasswordRequest:
    properties:
      email:
        type: string
      password:
        type: string
      uuid:
        type: string
    required:
    - email
    - password
    - uuid
    type: object
host: api.medkick.air.business
info:
  contact:
    email: the@raajpatel.dev
    name: Medkick API Support
    url: https://api.medkick.raajpatel.dev
  description: Medkick API Documentation
  title: Medkick API
  version: 0.1-dev
paths:
  /:
    get:
      consumes:
      - application/json
      description: Check if API is online
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Check if API is online
      tags:
      - General
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Logout
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Request a password reset for the given email
      parameters:
      - description: Reset Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Request a Password Reset
      tags:
      - Auth
  /auth/validate/{id}:
    get:
      consumes:
      - application/json
      description: Validates user
      produces:
      - application/json
      responses:
        "307":
          description: Temporary Redirect
      summary: Validate User
      tags:
      - User
  /auth/verify-reset-password:
    post:
      consumes:
      - application/json
      description: Validate Password Reset Token and Reset Password
      parameters:
      - description: Verify Reset Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.VerifyResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Reset Password
      tags:
      - Auth
  /careplan:
    post:
      consumes:
      - application/json
      description: Creates a care plan for the provided user
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/careplan.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CarePlan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a care plan
      tags:
      - Careplan
  /careplan/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the careplan with the provided ID
      parameters:
      - description: Careplan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a Careplan
      tags:
      - Careplan
    get:
      consumes:
      - application/json
      description: Returns a list of careplans if no ID is provided, otherwise returns
        the careplan with the provided ID
      parameters:
      - description: Careplan ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CarePlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Careplan(s)
      tags:
      - Careplan
    put:
      description: Uploads a careplan for the provided user
      parameters:
      - description: Careplan ID
        in: path
        name: id
        required: true
        type: integer
      - description: File
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CarePlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Upload Careplan
      tags:
      - Careplan
  /careplan/{id}/file:
    get:
      consumes:
      - application/json
      description: Download the careplan with the provided ID
      parameters:
      - description: Careplan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Download Careplan
      tags:
      - Careplan
  /cron/clear-pwd-reset:
    post:
      consumes:
      - application/json
      description: CRON ONLY - Clears all password reset tokens that are older than
        24 hours
      parameters:
      - description: Token Request
        in: body
        name: CronToken
        required: true
        schema:
          $ref: '#/definitions/cron.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Clear old password reset tokens
      tags:
      - CRON
  /cron/clear-test-billings:
    post:
      consumes:
      - application/json
      description: CRON ONLY - Clears all test billings
      parameters:
      - description: Token Request
        in: body
        name: CronToken
        required: true
        schema:
          $ref: '#/definitions/cron.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Clear Test Billings
      tags:
      - CRON
  /cron/sync-devices:
    post:
      consumes:
      - application/json
      description: CRON ONLY - Pulls and Syncs devices from Mio-Connect
      parameters:
      - description: Token Request
        in: body
        name: CronToken
        required: true
        schema:
          $ref: '#/definitions/cron.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Sync Devices from Mio Connect
      tags:
      - CRON
  /cron/trigger-cpt-worker:
    post:
      consumes:
      - application/json
      description: CRON ONLY - Triggers CPT Worker
      parameters:
      - description: Token Request
        in: body
        name: CronToken
        required: true
        schema:
          $ref: '#/definitions/cron.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Trigger CPT Worker
      tags:
      - CRON
  /device/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Device
      tags:
      - Devices
    get:
      consumes:
      - application/json
      description: Get devices by id, set id to 'all' to get all devices
      parameters:
      - description: Device ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Devices
      tags:
      - Devices
    patch:
      consumes:
      - application/json
      description: Update Device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Device
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/device.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update Device
      tags:
      - Devices
  /device/assign-device:
    patch:
      consumes:
      - application/json
      description: Assign Device
      parameters:
      - description: Assign Device
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/device.DeviceAssignRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Assign Device
      tags:
      - Devices
  /device/available-devices:
    get:
      description: Get Available Devices
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DeviceDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Available Devices
      tags:
      - Devices
  /diagnoses:
    get:
      consumes:
      - application/json
      description: List Diagnosis Codes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Diagnosis'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List Diagnosis Codes
      tags:
      - Organization
  /interaction:
    post:
      consumes:
      - application/json
      description: Create an interaction
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/interaction.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Interaction'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Interaction
      tags:
      - Interaction
  /interaction/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an interaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete an Interaction
      tags:
      - Interaction
    get:
      consumes:
      - application/json
      description: Get interaction(s)
      parameters:
      - description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Interaction(s)
      tags:
      - Interaction
    patch:
      consumes:
      - application/json
      description: Update an interaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/interaction.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update an Interaction
      tags:
      - Interaction
  /mio/forwardstatus:
    post:
      consumes:
      - application/json
      description: Mio Connect Status Ingestion Endpoint (Webhook)
      parameters:
      - description: Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/device.RequestStatus'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Ingest Status
      tags:
      - Mio (DO NOT USE)
  /mio/forwardtelemetry:
    post:
      consumes:
      - application/json
      description: Mio Connect Data Ingestion Endpoint (Webhook)
      parameters:
      - description: Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/device.RequestTelemetry'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Ingest Data
      tags:
      - Mio (DO NOT USE)
  /mio/status/{id}:
    get:
      consumes:
      - application/json
      description: Get Status Data for given ID
      parameters:
      - description: Device ID
        in: path
        name: id
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DeviceStatusData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Status Data
      tags:
      - Mio
  /mio/telemetry/{id}:
    get:
      consumes:
      - application/json
      description: Get Telemetry Data for given ID
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DeviceTelemetryData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Telemetry Data
      tags:
      - Mio
  /mio/telemetry/{id}/count:
    get:
      consumes:
      - application/json
      description: Get Number of Telemetry Entries This Week for given ID
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Number of Telemetry Entries This Week
      tags:
      - Mio
  /mio/telemetry/{id}/latest:
    get:
      consumes:
      - application/json
      description: Get Latest Telemetry Data for given ID
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.DeviceTelemetryData'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Latest Telemetry Data
      tags:
      - Mio
  /organization:
    post:
      consumes:
      - application/json
      description: ADMIN ONLY - Create Organization
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/organization.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Organization
      tags:
      - Organization
  /organization/{id}:
    delete:
      consumes:
      - application/json
      description: ADMIN ONLY - Delete Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Organization
      tags:
      - Organization
    get:
      consumes:
      - application/json
      description: Get Organization by ID, if ID is not provided, get self Organization,
        if admin "all" gets all
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Organization'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Organization
      tags:
      - Organization
    patch:
      consumes:
      - application/json
      description: DOCTOR/ADMIN ONLY - Update Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/organization.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: update Organization
      tags:
      - Organization
  /organization/{id}/billing-report:
    get:
      consumes:
      - application/json
      description: Get Billing Report
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      - description: Service
        enum:
        - RPM
        - CCM
        - PCM
        - BHI
        in: query
        name: service
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.BillingReportResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Billing Report
      tags:
      - Organization
  /organization/{id}/devices:
    get:
      consumes:
      - application/json
      description: Get Devices in Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Devices in Organization
      tags:
      - Organization
  /organization/{id}/interaction-setting:
    get:
      consumes:
      - application/json
      description: Get Interaction Setting
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Filter
        in: query
        name: filter
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Interaction Setting
      tags:
      - Organization
    put:
      consumes:
      - application/json
      description: Upsert Interaction Setting
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Upsert Request
        in: body
        name: upsert
        required: true
        schema:
          $ref: '#/definitions/organization.InteractionSettingData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Upsert Interaction Setting
      tags:
      - Organization
  /organization/{id}/telemetry-alert:
    get:
      consumes:
      - application/json
      description: List Telemetry Alert
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status
        in: query
        name: status
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: size
        type: integer
      - description: Sort By
        in: query
        name: sort_by
        type: string
      - description: Sort Direction
        in: query
        name: sort_direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/organization.TelemetryAlertResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List Telemetry Alert
      tags:
      - Organization
  /organization/{id}/telemetry-alert/{alert}/resolve:
    patch:
      consumes:
      - application/json
      description: Resolve Telemetry Alert
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Alert ID
        in: path
        name: alert
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Resolve Telemetry Alert
      tags:
      - Organization
  /patient/{id}:
    get:
      consumes:
      - application/json
      description: Gets patients, if ID is specified, gets specific patient, if ID
        is "all", gets all patients
      parameters:
      - description: Patient ID
        in: path
        name: id
        type: string
      - description: Org Filter
        in: query
        name: org
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.UserResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Patients(s)
      tags:
      - User
  /services:
    get:
      consumes:
      - application/json
      description: List Services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Service'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List Services
      tags:
      - Organization
  /user:
    post:
      consumes:
      - application/json
      description: ADMIN ONLY - Create User
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create User
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Admin & Doctor ONLY - Delete User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Gets users, if ID is specified, gets specific user, if ID is "all",
        gets all users
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Role Filter
        enum:
        - admin
        - doctor
        - nurse
        - patient
        - doctornv
        - nursenv
        - patientnv
        in: query
        name: filter
        type: string
      - description: Status Filter
        enum:
        - critical
        - warning
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get User(s)
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Updates user, if ID is specified, updates specific user, if ID
        is not specified, updates self
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/user.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update User
      tags:
      - User
  /user/{id}/alert-threshold:
    get:
      description: List Alert Thresholds
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.AlertThresholdData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List Alert Thresholds
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Upsert Alert Threshold
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Upsert Request
        in: body
        name: upsert
        required: true
        schema:
          $ref: '#/definitions/user.AlertThresholdData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Upsert Alert Threshold
      tags:
      - User
  /user/{id}/careplans:
    get:
      consumes:
      - application/json
      description: If ID is specified, gets care plans in that user, if ID is not
        specified, gets care plans in self
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.CareplanSheetResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get care plans in User
      tags:
      - User
  /user/{id}/devices:
    get:
      consumes:
      - application/json
      description: If ID is specified, gets devices in that user, if ID is not specified,
        gets devices in self
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Devices in User
      tags:
      - User
  /user/{id}/diagnoses:
    get:
      consumes:
      - application/json
      description: Get Diagnoses
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Diagnoses
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Diagnoses
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Upsert Diagnoses
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Upsert Request
        in: body
        name: upsert
        required: true
        schema:
          $ref: '#/definitions/user.DiagnosisData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Upsert Diagnoses
      tags:
      - User
  /user/{id}/interactions:
    get:
      consumes:
      - application/json
      description: If ID is specified, gets interactions in that user, if ID is not
        specified, gets interactions in self
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Interactions in User
      tags:
      - User
  /user/{id}/interactions/duration:
    get:
      consumes:
      - application/json
      description: Get the sum of the interaction durations for a user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: integer
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Total user interaction duration
      tags:
      - Interaction
  /user/{id}/patient-service:
    get:
      consumes:
      - application/json
      description: List Patient Services
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Status
        enum:
        - active
        - inactive
        - all
        in: query
        name: status
        required: true
        type: string
      - description: Page
        in: query
        name: page
        type: integer
      - description: Size
        in: query
        name: size
        type: integer
      - description: Sort By
        in: query
        name: sort_by
        type: string
      - description: Sort Direction
        in: query
        name: sort_direction
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.PatientServiceResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: List Patient Services
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Upsert Patient Services
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Upsert Request
        in: body
        name: upsert
        required: true
        schema:
          $ref: '#/definitions/user.PatientServiceData'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Upsert Patient Services
      tags:
      - User
  /user/count:
    get:
      consumes:
      - application/json
      description: ADMIN ONLY - Count Users
      parameters:
      - description: Role Filter
        enum:
        - admin
        - doctor
        - nurse
        - patient
        - doctornv
        - nursenv
        - patientnv
        in: query
        name: filter
        type: string
      - description: Status Filter
        enum:
        - critical
        - warning
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Count Users
      tags:
      - User
  /user/org/{id}:
    get:
      consumes:
      - application/json
      description: ADMIN & DOCTOR ONLY - if ID is specified, gets users in that organization,
        if ID is not specified, gets users in self's organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        type: integer
      - description: Role Filter
        enum:
        - admin
        - doctor
        - nurse
        - patient
        - doctornv
        - nursenv
        - patientnv
        in: query
        name: filter
        type: string
      - description: Status Filter
        enum:
        - critical
        - warning
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Users in Organization
      tags:
      - User
  /user/org/{id}/count:
    get:
      consumes:
      - application/json
      description: Count Users in Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role Filter
        enum:
        - admin
        - doctor
        - nurse
        - patient
        - doctornv
        - nursenv
        - patientnv
        in: query
        name: filter
        type: string
      - description: Status Filter
        enum:
        - critical
        - warning
        in: query
        name: status
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: integer
            type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Count Users in Organization
      tags:
      - User
schemes:
- https
swagger: "2.0"
