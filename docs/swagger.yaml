basePath: /v1
definitions:
  careplan.CreateRequest:
    properties:
      doctor_id:
        type: integer
      user_id:
        type: integer
    required:
    - user_id
    type: object
  cron.Request:
    properties:
      token:
        type: string
    required:
    - token
    type: object
  device.MioData:
    properties:
      bat:
        type: integer
      data:
        type: integer
      dataType:
        type: string
      dia:
        type: integer
      hand:
        type: boolean
      iccid:
        type: string
      ihb:
        type: boolean
      imei:
        type: string
      lts:
        type: integer
      meal:
        type: integer
      pul:
        type: integer
      sample:
        type: integer
      sample_type:
        type: integer
      sig:
        type: integer
      sig_lvl:
        type: integer
      sn:
        type: string
      sys:
        type: integer
      tri:
        type: boolean
      ts:
        type: integer
      tz:
        type: string
      uid:
        type: string
      unit:
        type: integer
      upload_time:
        type: integer
      uptime:
        type: integer
      user:
        type: integer
      wet:
        type: integer
      wt:
        type: integer
    required:
    - bat
    - dataType
    - iccid
    - imei
    - sig
    - tz
    type: object
  device.MioStatus:
    properties:
      at_t:
        type: integer
      bat:
        type: integer
      dataType:
        type: string
      imei:
        type: string
      me_num:
        type: integer
      net:
        type: string
      ops:
        type: string
      sig:
        type: integer
      tp:
        type: integer
      tz:
        type: string
    required:
    - bat
    - dataType
    - imei
    - tz
    type: object
  device.Request:
    properties:
      createdAt:
        type: integer
      data:
        $ref: '#/definitions/device.MioData'
      deviceId:
        type: string
      isTest:
        type: boolean
      modelNumber:
        type: string
      status:
        $ref: '#/definitions/device.MioStatus'
    required:
    - createdAt
    - deviceId
    - isTest
    - modelNumber
    type: object
  device.UpdateRequest:
    properties:
      battery_level:
        type: integer
      firmware_version:
        type: string
      imei:
        type: string
      model_number:
        type: string
      name:
        type: string
      serial_number:
        type: string
      signal_strength:
        type: string
      user_id:
        type: integer
    type: object
  dto.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      message:
        type: string
    type: object
  interaction.CreateRequest:
    properties:
      doctor_id:
        type: integer
      duration:
        type: integer
      notes:
        type: string
      session_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      user_id:
        type: integer
    required:
    - duration
    - notes
    - session_date
    - user_id
    type: object
  interaction.UpdateRequest:
    properties:
      doctor_id:
        type: integer
      duration:
        type: integer
      notes:
        type: string
      session_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      user_id:
        type: integer
    type: object
  models.CarePlan:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      doctor:
        $ref: '#/definitions/models.User'
      doctor_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      url:
        example: https://cdn.med-kick.com/xxx.pdf
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.Device:
    properties:
      battery_level:
        example: 100
        type: integer
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      firmware_version:
        example: 1.0.0
        type: string
      id:
        example: 1
        type: integer
      imei:
        example: "123456789"
        type: string
      model_number:
        example: "123456"
        type: string
      name:
        example: Sphygmomanometer/Weight Scale/Blood Glucose Meter
        type: string
      serial_number:
        example: "123456789"
        type: string
      signal_strength:
        example: "100"
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.DeviceStatusData:
    properties:
      attach_time:
        example: "100"
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      device:
        $ref: '#/definitions/models.Device'
      device_id:
        example: 1
        type: integer
      id:
        example: 1
        type: integer
      measure_count:
        example: 100
        type: integer
      network_format:
        example: GSM;eMTC;NB-IoT
        type: string
      network_ops:
        example: T-Mobile;Verizon
        type: string
      signal:
        example: 100
        type: integer
      temperature:
        example: 100
        type: integer
      timezone:
        description: Device
        example: UTC+6
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  models.DeviceTelemetryData:
    properties:
      blood_glucose:
        description: Blood Glucose Meter
        example: 80
        type: integer
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      device:
        $ref: '#/definitions/models.Device'
      device_id:
        example: 1
        type: integer
      diastolic_bp:
        example: 80
        type: integer
      hand_shaking:
        example: false
        type: boolean
      id:
        example: 1
        type: integer
      irregular_heartbeat:
        example: false
        type: boolean
      meal:
        example: 1. Before Meal; 2. After Meal
        type: string
      measured_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      pulse:
        example: 80
        type: integer
      sample_type:
        example: 1. Blood or Resistance; 2. Quality Control Liquid; 3. Sample is invalid
        type: string
      systolic_bp:
        description: Sphygmomanometer
        example: 120
        type: integer
      test_paper:
        example: 1. GOD; 2. GDH
        type: string
      triple_measurement:
        example: false
        type: boolean
      unit:
        example: mg/dL
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      weight:
        description: Weight Scale
        example: 80
        type: integer
      weight_lock_count:
        example: 3
        type: integer
      weight_stable_time:
        example: 5
        type: integer
    type: object
  models.Interaction:
    properties:
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      doctor:
        $ref: '#/definitions/models.User'
      doctor_id:
        example: 1
        type: integer
      duration:
        example: 30
        type: integer
      id:
        example: 1
        type: integer
      notes:
        example: Patient is doing well
        type: string
      session_date:
        example: "2021-01-01T00:00:00Z"
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      user:
        $ref: '#/definitions/models.User'
      user_id:
        example: 1
        type: integer
    type: object
  models.Organization:
    properties:
      address:
        example: 123 Main St
        type: string
      address2:
        example: Apt 1
        type: string
      city:
        example: Baltimore
        type: string
      country:
        example: USA
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Hopkins
        type: string
      phone:
        example: "08123456789"
        type: string
      state:
        example: MD
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      zip:
        example: "12345"
        type: string
    type: object
  models.User:
    properties:
      Location:
        example: Dallas, TX
        type: string
      avatar_src:
        example: https://cdn.med-kick.com/xxx.jpg
        type: string
      created_at:
        example: "2021-01-01T00:00:00Z"
        type: string
      dob:
        example: "2000-01-01"
        type: string
      email:
        type: string
      first_name:
        example: John
        type: string
      id:
        example: 1
        type: integer
      insurance_id:
        example: "123456789"
        type: string
      insurance_provider:
        example: Aetna
        type: string
      last_name:
        example: Doe
        type: string
      organization:
        $ref: '#/definitions/models.Organization'
      organization_id:
        example: 1
        type: integer
      password:
        example: "123456"
        type: string
      phone:
        example: "08123456789"
        type: string
      role:
        example: admin
        type: string
      updated_at:
        example: "2021-01-01T00:00:00Z"
        type: string
    type: object
  organization.CreateRequest:
    properties:
      address:
        type: string
      address2:
        type: string
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phone:
        type: string
      state:
        type: string
      zip:
        type: string
    required:
    - address
    - city
    - country
    - name
    - phone
    - state
    - zip
    type: object
  organization.UpdateRequest:
    properties:
      address:
        type: string
      address2:
        type: string
      city:
        type: string
      country:
        type: string
      name:
        type: string
      phone:
        type: string
      state:
        type: string
      zip:
        type: string
    required:
    - address
    - city
    - country
    - name
    - phone
    - state
    - zip
    type: object
  user.CreateRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      phone:
        type: string
      role:
        description: 'Roles: admin, doctor, patient, doctornv, patientnv (nv = not
          verified email)'
        type: string
    required:
    - dob
    - email
    - first_name
    - insurance_id
    - insurance_provider
    - last_name
    - location
    - organization_id
    - password
    - phone
    - role
    type: object
  user.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  user.RegisterRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      phone:
        type: string
    required:
    - dob
    - email
    - first_name
    - insurance_id
    - insurance_provider
    - last_name
    - location
    - organization_id
    - password
    - phone
    type: object
  user.ResetPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  user.UpdateRequest:
    properties:
      dob:
        type: string
      email:
        type: string
      first_name:
        type: string
      insurance_id:
        type: string
      insurance_provider:
        type: string
      last_name:
        type: string
      location:
        type: string
      organization_id:
        type: integer
      password:
        type: string
      phone:
        type: string
      role:
        type: string
    type: object
  user.VerifyResetPasswordRequest:
    properties:
      email:
        type: string
      password:
        type: string
      uuid:
        type: string
    required:
    - email
    - password
    - uuid
    type: object
host: api.medkick.air.business
info:
  contact:
    email: the@raajpatel.dev
    name: Medkick API Support
    url: https://api.medkick.raajpatel.dev
  description: Medkick API Documentation
  title: Medkick API
  version: 0.1-dev
paths:
  /:
    get:
      consumes:
      - application/json
      description: Check if API is online
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
      summary: Check if API is online
      tags:
      - General
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Login
      tags:
      - Auth
  /auth/logout:
    get:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Logout
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Register
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: Request a password reset for the given email
      parameters:
      - description: Reset Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Request a Password Reset
      tags:
      - Auth
  /auth/verify-reset-password:
    post:
      consumes:
      - application/json
      description: Validate Password Reset Token and Reset Password
      parameters:
      - description: Verify Reset Password
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.VerifyResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Reset Password
      tags:
      - Auth
  /careplan:
    post:
      consumes:
      - application/json
      description: Creates a care plan for the provided user
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/careplan.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CarePlan'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create a care plan
      tags:
      - Careplan
  /careplan/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes the careplan with the provided ID
      parameters:
      - description: Careplan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete a Careplan
      tags:
      - Careplan
    get:
      consumes:
      - application/json
      description: Returns a list of careplans if no ID is provided, otherwise returns
        the careplan with the provided ID
      parameters:
      - description: Careplan ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CarePlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Careplan(s)
      tags:
      - Careplan
    put:
      description: Uploads a careplan for the provided user
      parameters:
      - description: Careplan ID
        in: path
        name: id
        required: true
        type: integer
      - description: File
        in: formData
        name: file
        required: true
        type: file
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CarePlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Upload Careplan
      tags:
      - Careplan
  /careplan/{id}/file:
    get:
      consumes:
      - application/json
      description: Download the careplan with the provided ID
      parameters:
      - description: Careplan ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Download Careplan
      tags:
      - Careplan
  /cron/clear-pwd-reset:
    post:
      consumes:
      - application/json
      description: CRON ONLY - Clears all password reset tokens that are older than
        24 hours
      parameters:
      - description: Token Request
        in: body
        name: CronToken
        required: true
        schema:
          $ref: '#/definitions/cron.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Clear old password reset tokens
      tags:
      - CRON
  /cron/sync-devices:
    post:
      consumes:
      - application/json
      description: CRON ONLY - Pulls and Syncs devices from Mio-Connect
      parameters:
      - description: Token Request
        in: body
        name: CronToken
        required: true
        schema:
          $ref: '#/definitions/cron.Request'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Sync Devices from Mio Connect
      tags:
      - CRON
  /device/{id}:
    delete:
      consumes:
      - application/json
      description: Delete Device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Device
      tags:
      - Devices
    get:
      consumes:
      - application/json
      description: Get devices by id, set id to 'all' to get all devices
      parameters:
      - description: Device ID
        in: path
        name: id
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Devices
      tags:
      - Devices
    patch:
      consumes:
      - application/json
      description: Update Device
      parameters:
      - description: Device ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Device
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/device.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update Device
      tags:
      - Devices
  /interaction:
    post:
      consumes:
      - application/json
      description: Create an interaction
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/interaction.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Interaction
      tags:
      - Interaction
  /interaction/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an interaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete an Interaction
      tags:
      - Interaction
    get:
      consumes:
      - application/json
      description: Get interaction(s)
      parameters:
      - description: ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Interaction(s)
      tags:
      - Interaction
    patch:
      consumes:
      - application/json
      description: Update an interaction
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/interaction.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update an Interaction
      tags:
      - Interaction
  /mio/forwardstatus:
    post:
      consumes:
      - application/json
      description: Mio Connect Status Ingestion Endpoint (Webhook)
      parameters:
      - description: Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/device.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Ingest Status
      tags:
      - Mio (DO NOT USE)
  /mio/forwardtelemetry:
    post:
      consumes:
      - application/json
      description: Mio Connect Data Ingestion Endpoint (Webhook)
      parameters:
      - description: Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/device.Request'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Ingest Data
      tags:
      - Mio (DO NOT USE)
  /mio/status/{id}:
    get:
      consumes:
      - application/json
      description: Get Status Data for given ID
      parameters:
      - description: Device ID
        in: path
        name: id
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DeviceStatusData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Status Data
      tags:
      - Mio
  /mio/telemetry/{id}:
    get:
      consumes:
      - application/json
      description: Get Telemetry Data for given ID
      parameters:
      - description: Device ID
        in: path
        name: id
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.DeviceTelemetryData'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Telemetry Data
      tags:
      - Mio
  /organization:
    post:
      consumes:
      - application/json
      description: ADMIN ONLY - Create Organization
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/organization.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create Organization
      tags:
      - Organization
  /organization/{id}:
    delete:
      consumes:
      - application/json
      description: ADMIN ONLY - Delete Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete Organization
      tags:
      - Organization
    get:
      consumes:
      - application/json
      description: Get Organization by ID, if ID is not provided, get self Organization,
        if admin "all" gets all
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Organization'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Organization
      tags:
      - Organization
    patch:
      consumes:
      - application/json
      description: DOCTOR/ADMIN ONLY - Update Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/organization.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: update Organization
      tags:
      - Organization
  /organization/{id}/devices:
    get:
      consumes:
      - application/json
      description: Get Devices in Organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Devices in Organization
      tags:
      - Organization
  /user:
    post:
      consumes:
      - application/json
      description: ADMIN ONLY - Create User
      parameters:
      - description: Create Request
        in: body
        name: create
        required: true
        schema:
          $ref: '#/definitions/user.CreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Create User
      tags:
      - User
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Admin & Doctor ONLY - Delete User
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.MessageResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Delete User
      tags:
      - User
    get:
      consumes:
      - application/json
      description: Gets users, if ID is specified, gets specific user, if ID is "all",
        gets all users
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Role Filter
        enum:
        - admin
        - doctor
        - patient
        - doctornv
        - patientnv
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get User(s)
      tags:
      - User
    patch:
      consumes:
      - application/json
      description: Updates user, if ID is specified, updates specific user, if ID
        is not specified, updates self
      parameters:
      - description: User ID
        in: path
        name: id
        type: string
      - description: Update Request
        in: body
        name: update
        required: true
        schema:
          $ref: '#/definitions/user.UpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Update User
      tags:
      - User
  /user/{id}/careplans:
    get:
      consumes:
      - application/json
      description: If ID is specified, gets care plans in that user, if ID is not
        specified, gets care plans in self
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CarePlan'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get care plans in User
      tags:
      - User
  /user/{id}/devices:
    get:
      consumes:
      - application/json
      description: If ID is specified, gets devices in that user, if ID is not specified,
        gets devices in self
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Device'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Devices in User
      tags:
      - User
  /user/{id}/interactions:
    get:
      consumes:
      - application/json
      description: If ID is specified, gets interactions in that user, if ID is not
        specified, gets interactions in self
      parameters:
      - description: User ID
        in: path
        name: id
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Interaction'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Interactions in User
      tags:
      - User
  /user/org/{id}:
    get:
      consumes:
      - application/json
      description: ADMIN & DOCTOR ONLY - if ID is specified, gets users in that organization,
        if ID is not specified, gets users in self's organization
      parameters:
      - description: Organization ID
        in: path
        name: id
        type: integer
      - description: Role Filter
        enum:
        - admin
        - doctor
        - patient
        - doctornv
        - patientnv
        in: query
        name: filter
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/dto.ErrorResponse'
      summary: Get Users in Organization
      tags:
      - User
schemes:
- https
swagger: "2.0"
